@using BCnEncoder.Shared;
@using CommunityToolkit.HighPerformance;
@using FluentValidation.Results;
@using LeagueToolkit.Core.Animation;
@using LeagueToolkit.Core.Environment;
@using LeagueToolkit.Core.Meta;
@using LeagueToolkit.IO.MapGeometryFile;
@using LeagueToolkit.IO.SimpleSkinFile;
@using LeagueToolkit.Meta;
@using LeagueToolkit.Toolkit;
@using Microsoft.WindowsAPICodePack.Dialogs;
@using PhotinoNET;
@using Assimp;
@using System.Reflection;
@using FluentValidation;
@using SixLabors.ImageSharp.ColorSpaces;
@using MudSeverity = MudBlazor.Severity;
@using LeagueSkinnedMesh = LeagueToolkit.Core.Mesh.SkinnedMesh;
@using LeagueTexture = LeagueToolkit.Core.Renderer.Texture;
@using SharpImage = SixLabors.ImageSharp.Image<SixLabors.ImageSharp.PixelFormats.Rgba32>;
@using SixLabors.ImageSharp.PixelFormats;
@using SixLabors.ImageSharp;
@using Color = MudBlazor.Color;
@using Size = MudBlazor.Size;
@using Severity = MudBlazor.Severity;
@using lol2fbx.Utils;

@page "/skinnedmesh"

<MudStack Spacing="2">
    <MudAlert Severity="Severity.Warning">
        Important: lol2fbx exports the assets as-is without flipping the X axis (League world is left-handed). If you want to have the correct handedness in Blender, you will need to flip the root node/scene across the X axis (Blender is right-handed).
    </MudAlert>
    <MudPaper Elevation="0" Class="pa-6">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h4">Skinned Mesh to FBX</MudText>
            <MudDivider />
            <MudForm Model="@model" @ref="@form" Validation="@(validator.ValidateValue)">
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudFileUpload T="IBrowserFile" Accept=".skn" @bind-Files="model.SimpleSkinFile" For="@(() => model.SimpleSkinFile)" OnFilesChanged="UploadSimpleSkin"
                                           Class="mt-0">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.TwoTone.FileOpen"
                                               for="@context">
                                        Select Simple Skin
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            @if (model.SimpleSkinFile is not null)
                            {
                                <MudText Typo="Typo.body1">@model.SimpleSkinFile.Name</MudText>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudFileUpload T="IBrowserFile" Accept=".skl" @bind-Files="model.SkeletonFile" For="@(() => model.SkeletonFile)"
                                           Class="mt-0">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.TwoTone.FileOpen"
                                               for="@context">
                                        Select Skeleton
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            @if (model.SkeletonFile is not null)
                            {
                                <MudText Typo="Typo.body1">@model.SkeletonFile.Name</MudText>
                            }
                        </MudStack>
                    </MudItem>

                    <MudItem xs="12">
                        <MudGrid Class="dw-100" Spacing="2">
                            <MudItem xs="6">
                                @if (model.Materials is not null)
                                {
                                    <MudTable Dense
                                          Class="flex-grow-1"
                                          Items="@model.Materials">
                                        <ColGroup>
                                            <col style="width: 35%" />
                                            <col style="width: 65%" />
                                        </ColGroup>
                                        <HeaderContent>
                                            <MudTh>Material</MudTh>
                                            <MudTh>Texture</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Material">@context.Name</MudTd>
                                            <MudTd DataLabel="Texture">
                                                <MudStack Row AlignItems="AlignItems.Center">
                                                    <MudFileUpload T="IBrowserFile" Accept=".dds;.tex;.png" @bind-Files="context.TextureFile" For="@(() => context.TextureFile)"
                                                               Class="mt-0">
                                                        <ButtonTemplate Context="fileUpload">
                                                            <MudIconButton HtmlTag="label"
                                                                       Variant="Variant.Outlined"
                                                                       Color="Color.Primary"
                                                                       Icon="@Icons.Material.TwoTone.FileOpen"
                                                                       for="@fileUpload" />
                                                        </ButtonTemplate>
                                                    </MudFileUpload>
                                                    @if (context.TextureFile is not null)
                                                    {
                                                        <MudText Typo="Typo.body1">@context.TextureFile.Name</MudText>
                                                        <MudIconButton Icon="@Icons.Material.TwoTone.Close" Size="Size.Small" Color="Color.Error" OnClick="@(() => context.TextureFile = null)" />
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.body1">Select Texture</MudText>
                                                    }
                                                </MudStack>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                }
                            </MudItem>
                            <MudItem xs="6">
                                <MudStack Spacing="2">
                                    <MudTable Dense FixedHeader Virtualize Height="500px" Items="model.Animations">
                                        <HeaderContent>
                                            <MudTh>Animation</MudTh>
                                            <MudTh>Duration</MudTh>
                                            <MudTh>FPS</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Name">@context.Name</MudTd>
                                            <MudTd DataLabel="Duration">@(Math.Round(context.Asset.Duration, 3)) s</MudTd>
                                            <MudTd DataLabel="FPS">@(Math.Round(context.Asset.Fps))</MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                        <MudButton Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               OnClick="AddAnimations">
                                            Add Animations
                                        </MudButton>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                    </MudGrid>
                </MudForm>
                <MudDivider />
                <MudStack Class="ml-auto">
                    <MudTooltip Text="Export to FBX">
                        <MudButton Disabled="@_isConverting" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Submit">
                            @if (_isConverting)
                        {
                            <MudProgressCircular Indeterminate Size="Size.Small" />
                        }
                        else
                        {
                            <MudText>FBX</MudText>
                        }
                    </MudButton>
                </MudTooltip>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudStack>
@code {
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] PhotinoWindow Window { get; set; }

    private bool _isConverting;

    MudForm form;
    SkinnedMeshToFbxModel model = new();

    SkinnedMeshToFbxModelValidator validator = new();

    public class SkinnedMeshToFbxModel
    {
        public IBrowserFile SimpleSkinFile { get; set; }
        public IBrowserFile SkeletonFile { get; set; }

        public IEnumerable<MaterialModel> Materials { get; set; }
        public IEnumerable<AnimationModel> Animations { get; set; } = new List<AnimationModel>();
    }

    public class MaterialModel
    {
        public string Name { get; set; }

        public IBrowserFile TextureFile { get; set; }
    }

    public class AnimationModel
    {
        public string Name { get; set; }

        public IAnimationAsset Asset { get; set; }
    }

    public class SkinnedMeshToFbxModelValidator : AbstractValidator<SkinnedMeshToFbxModel>
    {
        public Func<object, string, Task<IEnumerable<string>>> ValidateValue =>
            async (model, propertyName) =>
                await ValidateAsync(ValidationContext<SkinnedMeshToFbxModel>.CreateWithOptions((SkinnedMeshToFbxModel)model, x => x.IncludeProperties(propertyName))) switch
                {
                    { IsValid: true } => Array.Empty<string>(),
                    ValidationResult result => result.Errors.Select(e => e.ErrorMessage)
                };

        public SkinnedMeshToFbxModelValidator()
        {
            RuleFor(x => x.SimpleSkinFile)
                .NotEmpty()
                .DependentRules(() =>
                {
                    RuleFor(x => x.SkeletonFile).NotEmpty();
                });

            When(x => x.Animations is not null && x.Animations.Count() is not 0, () =>
            {
                RuleFor(x => x.SkeletonFile).NotEmpty();
            });
        }
    }

    public async void UploadSimpleSkin(InputFileChangeEventArgs e)
    {
        using MemoryStream simpleSkinStream = new();
        using (Stream fileStream = e.File.OpenReadStream(long.MaxValue))
        {
            await fileStream.CopyToAsync(simpleSkinStream);
            simpleSkinStream.Position = 0;
        }

        using LeagueSkinnedMesh skinnedMesh = LeagueSkinnedMesh.ReadFromSimpleSkin(simpleSkinStream);

        this.model.Materials = skinnedMesh.Ranges.Select(x =>
            new MaterialModel()
                {
                    Name = x.Material
                }
        ).ToList();
        StateHasChanged();
    }

    public void AddAnimations()
    {
        CommonOpenFileDialog dialog = new("Add animations") { Multiselect = true };
        dialog.Filters.Add(new("Animation", "anm"));

        if (dialog.ShowDialog(this.Window.WindowHandle) is CommonFileDialogResult.Cancel)
            return;

        try
        {
            AddAnimations(dialog.FileNames);
        }
        catch (Exception exception)
        {
            this.Snackbar.Add($"Error: {exception}", MudSeverity.Error, o => o.RequireInteraction = true);
        }
    }
    private void AddAnimations(IEnumerable<string> animationFiles)
    {
        List<AnimationModel> animations = new();
        foreach (string animationFile in animationFiles)
        {
            using FileStream animationStream = File.OpenRead(animationFile);

            animations.Add(new()
                {
                    Name = Path.GetFileName(animationFile),
                    Asset = AnimationAsset.Load(animationStream)
                });
        }

        this.model.Animations = animations;
    }

    public async Task Submit()
    {
        await this.form.Validate();
        if (this.form.IsValid is false)
            return;

        CommonSaveFileDialog dialog = new("Save FBX");
        foreach (CommonFileDialogFilter filter in FileDialogUtils.CreateFbxFilters())
            dialog.Filters.Add(filter);

        if (dialog.ShowDialog(this.Window.WindowHandle) is CommonFileDialogResult.Cancel)
            return;

        this._isConverting = true;
        StateHasChanged();
        try
        {
            await ConvertToFbx(dialog.FileName);
            this.Snackbar.Add("Converted to FBX!", MudSeverity.Success);
        }
        catch (Exception exception)
        {
            this.Snackbar.Add($"Error: {exception}", MudSeverity.Error, o => o.RequireInteraction = true);
        }
        finally
        {
            this._isConverting = false;
            StateHasChanged();
        }
    }

    private async Task ConvertToFbx(string fbxPath)
    {
        using MemoryStream simpleSkinStream = new();
        await this.model.SimpleSkinFile.OpenReadStream(long.MaxValue).CopyToAsync(simpleSkinStream);
        simpleSkinStream.Position = 0;

        using LeagueSkinnedMesh skinnedMesh = LeagueSkinnedMesh.ReadFromSimpleSkin(simpleSkinStream);
        RigResource skeleton = await LoadSkeleton();

        IEnumerable<(string, Stream)> textures = await LoadTextures();

        Scene scene = skeleton switch
        {
            null => skinnedMesh.ToFbx(textures),
            _ => skinnedMesh.ToFbx(skeleton, textures, this.model.Animations.Select(x => (x.Name, x.Asset)))
        };

        AssimpContext exporter = new();
        exporter.ExportFile(scene, fbxPath, "fbx");
    }

    private async Task<RigResource> LoadSkeleton()
    {
        if (this.model.SkeletonFile is null)
            return null;

        using MemoryStream skeletonStream = new();
        await this.model.SkeletonFile.OpenReadStream(long.MaxValue).CopyToAsync(skeletonStream);
        skeletonStream.Position = 0;

        return new(skeletonStream);
    }

    private async Task<IEnumerable<(string, Stream)>> LoadTextures()
    {
        IEnumerable<Task<(string, MemoryStream)>> asyncTextures = this.model.Materials
           .Where(x => x.TextureFile is not null)
           .Select(async x =>
           {
               using MemoryStream textureStream = new();
               await x.TextureFile.OpenReadStream(long.MaxValue).CopyToAsync(textureStream);
               textureStream.Position = 0;

               LeagueTexture texture = LeagueTexture.Load(textureStream);
               ReadOnlyMemory2D<ColorRgba32> mip = texture.Mips[0];
               using SharpImage image = mip.ToImage();

               MemoryStream imageStream = new();
               await image.SaveAsPngAsync(imageStream);
               imageStream.Position = 0;

               return (x.Name, imageStream);
           });

        List<(string, Stream)> textures = new();
        foreach (Task<(string, MemoryStream)> asyncTexture in asyncTextures)
        {
            textures.Add(await asyncTexture);
        }

        return textures;
    }
}
